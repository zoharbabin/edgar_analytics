"""
test_metrics.py

Expanded to test IFRS coverage, intangible ratio, lease liabilities, net debt,
net debt/EBITDA, etc., while preserving existing tests for basic GAAP.
Includes tests for Interest Expense, EBIT (standard), EBITDA (standard), and Interest Coverage.
"""

import pytest
import pandas as pd
from unittest.mock import MagicMock

from edgar_analytics.metrics import (
    compute_ratios_and_metrics,
    get_single_filing_snapshot,
    get_filing_info
)


@pytest.fixture
def sample_balance_df():
    """
    A small example DataFrame containing the
    balance sheet data used for the basic test.
    """
    return pd.DataFrame(
        {"Value": [4000, 1000, 3000, 1000, 500]},
        index=[
            "Total current assets",
            "Total liabilities",
            "Total assets",
            "Total shareholders’ equity",
            "Cash and cash equivalents",
        ]
    )

@pytest.fixture
def sample_income_df():
    """
    A small example for the income statement.
    """
    return pd.DataFrame(
        {"Value": [1500, -700, 800, -400, 300]},
        index=[
            "Net sales",  # 1500 => "Revenue"
            "Cost of sales",  # -700 => flipped => 700
            "Gross margin",
            "Total operating expenses",  # -400 => flipped => 400
            "Net income",     # => 300
        ]
    )

@pytest.fixture
def sample_cash_df():
    """
    Minimal example to test FCF logic: 1000 opCF - 200 capex = 800 FCF.
    """
    return pd.DataFrame(
        {"Value": [1000, -200]},
        index=[
            "Cash generated by operating activities",
            "Capital Expenditures",
        ]
    )


def test_compute_ratios_and_metrics_basic(sample_balance_df, sample_income_df, sample_cash_df):
    """
    A straightforward scenario with typical data and standard checks.
    """
    metrics = compute_ratios_and_metrics(sample_balance_df, sample_income_df, sample_cash_df)
    assert "Revenue" in metrics
    assert metrics["Revenue"] == 1500
    assert metrics["CostOfRev"] == 700  # cost_of_sales negative => flipped
    assert metrics["OpEx"] == 400
    assert metrics["Net Income"] == 300
    assert metrics["Free Cash Flow"] == 800  # 1000 opCF - 200 CapEx
    assert "Alerts" in metrics


def test_compute_ratios_and_metrics_all_zero():
    """
    Edge-case: everything = 0 => no crash, stable outputs.
    """
    bal_df = pd.DataFrame({"Value": [0, 0, 0, 0, 0]},
                          index=["Total current assets", "Total current liabilities",
                                 "Total assets", "Total liabilities", "Total shareholders’ equity"])
    inc_df = pd.DataFrame({"Value": [0, 0, 0, 0, 0]},
                          index=["Net sales", "Cost of sales", "Gross margin",
                                 "Total operating expenses", "Net income"])
    cf_df = pd.DataFrame({"Value": [0, 0]},
                         index=["Cash generated by operating activities", "Capital Expenditures"])

    metrics = compute_ratios_and_metrics(bal_df, inc_df, cf_df)
    assert metrics["Revenue"] == 0
    assert metrics["CostOfRev"] == 0
    assert metrics["Net Income"] == 0
    assert metrics["Free Cash Flow"] == 0
    assert metrics["EBIT (standard)"] == 0
    assert metrics["EBITDA (standard)"] == 0
    assert metrics["Interest Coverage"] == 0


def test_compute_ratios_and_metrics_ifrs_extras():
    """
    Test IFRS expansions: intangible ratio, goodwill ratio, net debt,
    lease liabilities, net debt/EBITDA, etc.
    """
    bal_df = pd.DataFrame({
        "Value": [
            5000,  # total assets
            2500,  # total liabilities
            2500,  # total equity
            500,   # intangible assets
            300,   # goodwill
            200,   # operating lease liabilities
            50,    # finance lease liabilities
            100,   # short-term debt
            900,   # long-term debt
            1000,  # Cash & equivalents
        ]
    }, index=[
        "Total assets",
        "Total liabilities",
        "Total shareholders’ equity",
        "Intangible assets",
        "Goodwill",
        "Operating lease liabilities",
        "Finance lease liabilities",
        "Short-term debt",
        "Long-term debt",
        "Cash and cash equivalents",
    ])

    inc_df = pd.DataFrame({
        "Value": [
            2000,  # revenue
            -800,  # cost_of_sales => 800
            -300,  # op exp => 300
            400,   # net income
            100,   # depreciation & amort
        ]
    }, index=[
        "Net sales",
        "Cost of sales",
        "Operating expenses",
        "Net income",
        "Depreciation and amortization"
    ])

    cf_df = pd.DataFrame({
        "Value": [
            600,   # operating CF
            -150,  # capex => 150
        ]
    }, index=[
        "Cash generated by operating activities",
        "Capital Expenditures"
    ])

    metrics = compute_ratios_and_metrics(bal_df, inc_df, cf_df)
    assert metrics["Revenue"] == 2000
    assert metrics["CostOfRev"] == 800
    assert metrics["OpEx"] == 300
    assert metrics["Net Income"] == 400
    assert metrics["EBITDA (approx)"] == pytest.approx((2000 - 800 - 300) + 100)
    assert metrics["Free Cash Flow"] == 450  # 600 - 150

    assert metrics["Intangible Ratio %"] == pytest.approx(10.0, abs=1e-3)  # 500 / 5000
    assert metrics["Goodwill Ratio %"] == pytest.approx(6.0, abs=1e-3)    # 300 / 5000
    assert metrics["Tangible Equity"] == pytest.approx(1700, abs=1e-3)    # 2500 - (500+300)

    # net debt => (100 + 900 + 200+50) - 1000 => 250
    assert metrics["Net Debt"] == 250
    assert metrics["Net Debt/EBITDA"] == pytest.approx(250 / metrics["EBITDA (approx)"], abs=1e-3)
    assert metrics["Lease Liabilities Ratio %"] == pytest.approx(5.0, abs=1e-3)  # (200+50)/5000


def test_get_single_filing_snapshot_no_filing():
    """
    If .latest() returns None => no metrics, just empty dict.
    """
    mock_company = MagicMock()
    mock_company.get_filings.return_value.latest.return_value = None

    snap = get_single_filing_snapshot(mock_company, "10-K")
    assert snap["metrics"] == {}
    assert snap["filing_info"] == {}


def test_get_single_filing_snapshot_no_financials():
    mock_filing = MagicMock()
    mock_filing.form = "10-K"
    class NoFinancialsObj:
        pass
    mock_filing.obj.return_value = NoFinancialsObj()

    mock_company = MagicMock()
    mock_company.get_filings.return_value.latest.return_value = mock_filing
    snap = get_single_filing_snapshot(mock_company, "10-K")
    assert snap["metrics"] == {}
    assert snap["filing_info"]["form_type"] == "10-K"


def test_get_filing_info_missing_attributes():
    fake_filing = MagicMock()
    fake_filing.form = None
    fake_filing.filing_date = None
    fake_filing.company = None
    fake_filing.accession_no = None

    info = get_filing_info(fake_filing)
    assert info["form_type"] == "Unknown"
    assert info["filed_date"] == "Unknown"
    assert info["company"] == "Unknown"
    assert info["accession_no"] == "Unknown"


def test_interest_expense_and_coverage():
    """
    Verify that a negative 'Interest Expense' gets flipped,
    standard EBIT/EBITDA are computed, and coverage ratio > 0 if interest != 0.
    """
    bal_df = pd.DataFrame({"Value": [5000, 2000, 3000]},
                          index=["Total assets", "Total liabilities", "Total shareholders’ equity"])

    # revenue=1000, cost_of_sales=-400 => 400, net_income=200
    # interest_expense=-50 => +50 after flip
    # income_tax_expense=-30 => +30
    inc_df = pd.DataFrame(
        {"Value": [1000, -400, -50, -30, 200, -100]},
        index=[
            "Net sales",
            "Cost of sales",
            "Interest expense",
            "Income Tax Expense",
            "Net income",
            "Depreciation and amortization",
        ]
    )

    cf_df = pd.DataFrame({"Value": [500, -100]},
                         index=["Cash generated by operating activities", "Capital Expenditures"])

    metrics = compute_ratios_and_metrics(bal_df, inc_df, cf_df)
    # interest_exp => 50
    assert metrics["Interest Expense"] == 50
    # income tax => 30
    assert metrics["Income Tax Expense"] == 30

    # standard EBIT => net_income (200) + interest(50) + tax(30) = 280
    assert metrics["EBIT (standard)"] == 280

    # plus D&A => 100 => 380
    assert metrics["EBITDA (standard)"] == 380

    # coverage => 280 / 50 => 5.6
    assert metrics["Interest Coverage"] == pytest.approx(5.6, abs=1e-3)

    # old approx EBITDA => (gross_profit - op_exp) + dep
    # we can quickly confirm it but not the main test
    assert "EBIT (approx)" in metrics
    assert "EBITDA (approx)" in metrics
