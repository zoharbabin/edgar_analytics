"""
test_metrics.py

Expanded to test IFRS coverage like intangible ratio, lease liabilities, 
net debt, net debt/EBITDA, etc., while preserving existing tests for basic GAAP.
"""

import pytest
import pandas as pd
from unittest.mock import MagicMock

from edgar_analytics.metrics import (
    compute_ratios_and_metrics,
    get_single_filing_snapshot,
    get_filing_info
)

@pytest.fixture
def sample_balance_df():
    """
    A small example DataFrame containing the
    balance sheet data used for the basic test.
    """
    return pd.DataFrame(
        {"Value": [4000, 1000, 3000, 1000]},  # Just ensure some >0 values
        index=[
            "Total current assets",
            "Total liabilities",
            "Total assets",
            "Total shareholders’ equity",
        ]
    )

@pytest.fixture
def sample_income_df():
    """
    A small example for the income statement.
    """
    return pd.DataFrame(
        {"Value": [1500, -700, 800, -400, 300]},
        index=[
            "Net sales",  # 1500 => "Revenue"
            "Cost of sales",  # -700 => flipped => 700
            "Gross margin",   # not strictly used here but used in code
            "Total operating expenses",  # -400 => flipped => 400
            "Net income",     # => 300
        ]
    )

@pytest.fixture
def sample_cash_df():
    """
    Minimal example to test FCF logic: 1000 opCF - 200 capex = 800 FCF.
    """
    return pd.DataFrame(
        {"Value": [1000, -200]},
        index=[
            "Cash generated by operating activities",  # => 1000
            "Capital Expenditures",                   # => -200 => 200
        ]
    )

def test_compute_ratios_and_metrics_basic(sample_balance_df, sample_income_df, sample_cash_df):
    """
    A straightforward scenario with typical data and standard checks.
    """
    metrics = compute_ratios_and_metrics(sample_balance_df, sample_income_df, sample_cash_df)
    assert "Revenue" in metrics
    assert metrics["Revenue"] == 1500
    assert metrics["CostOfRev"] == 700  # cost_of_sales negative => flipped
    assert metrics["OpEx"] == 400
    assert metrics["Net Income"] == 300
    assert metrics["Free Cash Flow"] == 800  # 1000 opCF - 200 CapEx
    assert "Alerts" in metrics


def test_compute_ratios_and_metrics_all_zero():
    """
    Edge-case: everything = 0 => no crash, stable outputs.
    """
    bal_df = pd.DataFrame({"Value": [0, 0, 0, 0, 0]},
                          index=["Total current assets", "Total current liabilities",
                                 "Total assets", "Total liabilities", "Total shareholders’ equity"])
    inc_df = pd.DataFrame({"Value": [0, 0, 0, 0, 0]},
                          index=["Net sales", "Cost of sales", "Gross margin", 
                                 "Total operating expenses", "Net income"])
    cf_df = pd.DataFrame({"Value": [0, 0]},
                         index=["Cash generated by operating activities", "Capital Expenditures"])

    metrics = compute_ratios_and_metrics(bal_df, inc_df, cf_df)
    assert metrics["Revenue"] == 0
    assert metrics["CostOfRev"] == 0
    assert metrics["Net Income"] == 0
    assert metrics["Free Cash Flow"] == 0


def test_compute_ratios_and_metrics_ifrs_extras():
    """
    Test IFRS expansions: intangible ratio, goodwill ratio, net debt, 
    lease liabilities, net debt/EBITDA, etc.
    """
    bal_df = pd.DataFrame({
        "Value": [
            5000,  # total assets
            2500,  # total liabilities
            2500,  # total equity
            500,   # intangible assets
            300,   # goodwill
            200,   # operating lease liabilities
            50,    # finance lease liabilities
            100,   # short-term debt
            900,   # long-term debt
        ]
    }, index=[
        "Total assets",
        "Total liabilities",
        "Total shareholders’ equity",
        "Intangible assets",
        "Goodwill",
        "Operating lease liabilities",
        "Finance lease liabilities",
        "Short-term debt",
        "Long-term debt",
    ])

    inc_df = pd.DataFrame({
        "Value": [
            2000,  # revenue
            -800,  # cost_of_sales => flipped to +800
            -300,  # op exp => flipped to +300
            400,   # net income
            100,   # depreciation & amort
        ]
    }, index=[
        "Net sales",
        "Cost of sales",
        "Operating expenses",
        "Net income",
        "Depreciation and amortization"
    ])

    cf_df = pd.DataFrame({
        "Value": [
            600,   # operating CF
            -150,  # capex => 150
        ]
    }, index=[
        "Cash generated by operating activities",
        "Capital Expenditures"
    ])

    metrics = compute_ratios_and_metrics(bal_df, inc_df, cf_df)
    assert metrics["Revenue"] == 2000
    assert metrics["CostOfRev"] == 800
    assert metrics["OpEx"] == 300
    assert metrics["Net Income"] == 400
    assert metrics["EBITDA (approx)"] == pytest.approx( (2000-800-300) + 100 )
    assert metrics["Free Cash Flow"] == 450  # 600 opCF - 150 capex => 450

    # intangible ratio, goodwill ratio
    assert metrics["Intangible Ratio %"] == pytest.approx(10.0, abs=1e-3)  # 500/5000 => 10%
    assert metrics["Goodwill Ratio %"] == pytest.approx(6.0, abs=1e-3)    # 300/5000 => 6%
    assert metrics["Tangible Equity"] == pytest.approx(1700, abs=1e-3)    # 2500 - 800 => 1700
    # net debt => (100 + 900 + 200+50) - 0 => 1250
    assert metrics["Net Debt"] == 1250
    nd_ebitda = metrics["Net Debt/EBITDA"]
    assert nd_ebitda == pytest.approx(1250 / metrics["EBITDA (approx)"], abs=1e-3)
    # lease ratio => (200+50)/5000 => 5%
    assert metrics["Lease Liabilities Ratio %"] == pytest.approx(5.0, abs=1e-3)


def test_get_single_filing_snapshot_no_filing():
    """
    If .latest() returns None => no metrics, just empty dict.
    """
    mock_company = MagicMock()
    mock_company.get_filings.return_value.latest.return_value = None

    snap = get_single_filing_snapshot(mock_company, "10-K")
    assert snap["metrics"] == {}
    assert snap["filing_info"] == {}


def test_get_single_filing_snapshot_no_financials():
    mock_filing = MagicMock()
    mock_filing.form = "10-K"
    class NoFinancialsObj:
        # this class has no .financials attribute
        pass
    mock_filing.obj.return_value = NoFinancialsObj()

    mock_company = MagicMock()
    mock_company.get_filings.return_value.latest.return_value = mock_filing
    snap = get_single_filing_snapshot(mock_company, "10-K")
    assert snap["metrics"] == {}
    assert snap["filing_info"]["form_type"] == "10-K"


def test_get_filing_info_missing_attributes():
    fake_filing = MagicMock()
    fake_filing.form = None
    fake_filing.filing_date = None
    fake_filing.company = None
    fake_filing.accession_no = None

    info = get_filing_info(fake_filing)
    assert info["form_type"] == "Unknown"
    assert info["filed_date"] == "Unknown"
    assert info["company"] == "Unknown"
    assert info["accession_no"] == "Unknown"
